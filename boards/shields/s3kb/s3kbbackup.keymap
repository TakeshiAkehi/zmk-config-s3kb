#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>


#define LDEF 0
#define LMSK 1
#define LNAV 2
#define LFUN 3
#define LSYM 4
#define LADJ 5

#define ZMK_MOUSE_ENC_SCRL_VAL 70
#define SCRL_ENC_UP MOVE_Y(ZMK_MOUSE_ENC_SCRL_VAL)
#define SCRL_ENC_DOWN MOVE_Y(-ZMK_MOUSE_ENC_SCRL_VAL)
#define SCRL_ENC_LEFT MOVE_X(-ZMK_MOUSE_ENC_SCRL_VAL)
#define SCRL_ENC_RIGHT MOVE_X(ZMK_MOUSE_ENC_SCRL_VAL)
#define ZMK_MOUSE_ENC_SCRL_FAST_VAL 140
#define SCRL_ENC_FAST_UP MOVE_Y(ZMK_MOUSE_ENC_SCRL_FAST_VAL)
#define SCRL_ENC_FAST_DOWN MOVE_Y(-ZMK_MOUSE_ENC_SCRL_FAST_VAL)
#define SCRL_ENC_FAST_LEFT MOVE_X(-ZMK_MOUSE_ENC_SCRL_FAST_VAL)
#define SCRL_ENC_FAST_RIGHT MOVE_X(ZMK_MOUSE_ENC_SCRL_FAST_VAL)

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <175>;
    flavor = "balanced";
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    trackball_listener_mmv {
            compatible = "zmk,input-behavior-listener";
            device = <&trackball>;
            layers = <LDEF LMSK>;
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            scale-multiplier = <1>;
            scale-divisor = <1>;
            /* bind a behavior to auto activate MSK layer for &mkp */
            //bindings = <&ib_tog_layer LMSK>;
    };

    trackball_listener_msc {
            compatible = "zmk,input-behavior-listener";
            device = <&trackball>;
            layers = <LSYM>; 
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_MISC>;
            y-input-code = <INPUT_REL_WHEEL>;
            y-invert;
            bindings = <&ib_wheel_scaler 1 16>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };

    encoders: encoders {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &mid_encoder &right_encoder>;
        left_config{
            triggers-per-rotation = <7>;
        };
        mid_config{
            triggers-per-rotation = <24>;
        };
        right_config{
            triggers-per-rotation = <24>;
        };
    };

    behaviors {
        mcap: behavior_mo_caps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
        };
        mtog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        mlt: mouse_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mkp>;
        };

        scroll_enc_du: scroll_enc_du {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_ENC_DOWN>, <&msc SCRL_ENC_UP>;
            tap-ms = <20>;
        };
        scroll_enc_fast_du: scroll_enc_fast_du {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_ENC_FAST_DOWN>, <&msc SCRL_ENC_FAST_UP>;
            tap-ms = <20>;
        };

        scroll_enc_rl: scroll_enc_rl {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_ENC_RIGHT>, <&msc SCRL_ENC_LEFT>;
            tap-ms = <20>;
        };

        scroll_enc_lr: scroll_enc_lr {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_ENC_LEFT>, <&msc SCRL_ENC_RIGHT>;
            tap-ms = <20>;
        };
    };

    combos{
        compatible = "zmk,combos";
        timeout-ms = <200>;

        // key-position = row*7 + col
        //    RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)         RC(0,6) RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)
        //    RC(1,5) RC(1,6) RC(2,0) RC(2,1) RC(2,2) RC(2,3)         RC(2,4) RC(2,5) RC(2,6) RC(3,0) RC(3,1) RC(3,2)
        //    RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(5,0) RC(5,1)
        //                                    RC(5,2) RC(5,3)         RC(5,4) RC(5,5)                                   RC(5,6)

        combo_right_2TM {
            key-positions = <7 19>;
            bindings = <&kp COMMA>;
        };
        combo_right_3TM {
            key-positions = <8 20>;
            bindings = <&kp DOT>;
        };
        combo_right_4TM {
            key-positions = <9 21>;
            bindings = <&kp SEMI>;
        };
        combo_right_5MB {
            key-positions = <22 35>;
            bindings = <&kp RET>;
        };
        combo_right_6MB {
            key-positions = <23 36>;
            bindings = <&kp RET>;
        };
        combo_right_56B {
            key-positions = <35 36>;
            bindings = <&mkp LCLK>;
        };
        combo_right_456B {
            key-positions = <34 35 36>;
            bindings = <&mo LSYM>;
        };
        combo_right_45B {
            key-positions = <34 35>;
            bindings = <&mo LFUN>;
        };
        combo_left_54B {
            key-positions = <25 26>;
            bindings = <&mo LFUN>;
        };
        combo_left_thum {
            key-positions = <37 38>;
            bindings = <&mo LFUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp LALT  &kp Q &kp W &kp U &kp F &kp ESC                  &kp K    &kp L &kp R &kp Y &kp P &kp DEL
            &kp LCTRL &kp E &kp I &kp A &kp O &kp MINUS                &kp BSPC &kp T &kp N &kp S &kp H &kp RET
            &kp LSHFT &kp Z &kp X &kp C &kp V &kp PRCNT      &mo LADJ  &kp G    &kp D &kp M &kp J &kp B &mlt LMSK LCLK
                                    &lt LSYM TAB &mt LCTRL SPACE           &lt LNAV SPACE &mcap LGUI 0                &none
            &mo LSYM  &kp UP    &mo LMSK   &none
            &kp LEFT  &kp DOWN  &kp RIGHT  &mtog LMSK LMSK
            >;
            /* cw-ccw = right-left = down-up */
            sensor-bindings = <&inc_dec_kp TAB LS(TAB) &inc_dec_kp RIGHT LEFT &scroll_enc_du >; 
        };
        
        mouse_key_layer {
            bindings = <
            &trans &trans &trans &trans &trans &trans        &trans &trans   &trans    &mkp MCLK &mkp RCLK &kp DEL
            &trans &trans &trans &trans &trans &trans        &trans &mkp MB4 &mkp LCLK &mkp MCLK &mkp RCLK &kp RET 
            &trans &trans &trans &trans &trans &trans &trans &trans &mkp MB5 &mkp LCLK &mkp MCLK &mkp RCLK &mkp LCLK 
                                  &mo LSYM &kp LCTRL         &mkp MB4 &mkp MB5                        &none
            &trans &kp LCTRL &trans &trans
            &trans &kp LSHFT &trans &trans
            >;
            /* cw-ccw = right-left = down-up */
            sensor-bindings = <&scroll_enc_rl &scroll_enc_rl &scroll_enc_du >; 
        };
        
        layer_nav {
            bindings = <
            &kp LALT  &none        &kp N4 &kp N5 &kp N6  &kp ESC         &none         &kp PG_DN     &kp UP        &kp PG_UP    &kp LGUI &kp DEL 
            &kp LCTRL &mt LCTRL N0 &kp N1 &kp N2 &kp N3  &none           &kp BSPC      &kp LEFT      &kp DOWN      &kp RIGHT    &kp LALT &kp RET
            &kp LSHFT &mt LSHFT N0 &kp N7 &kp N8 &kp N9  &none    &none  &kp LS(LA(B)) &kp LC(PG_UP) &kp LC(PG_DN) &kp HOME     &kp END  &kp RSHFT
                                        &lt LSYM TAB   &kp LCTRL         &trans     &kp LGUI                    &none
            &trans &trans &trans &trans
            &trans &trans &trans &trans
            >;
            /* cw-ccw = right-left = down-up */
            sensor-bindings = <&inc_dec_kp LC(PG_DN) LC(PG_UP) &inc_dec_kp DOWN UP &inc_dec_kp LC(PG_DN) LC(PG_UP) >; 
        };

        layer_fun {
            bindings = <
            &kp LALT   &kp F1 &kp F2 &kp F3  &kp F4  &kp F5                &kp DOT    &kp N7 &kp N8 &kp N9 &kp MINUS &kp DEL 
            &kp LCTRL  &kp F6 &kp F7 &kp F8  &kp F9  &kp LS(F5)            &kp BSPC   &kp N4 &kp N5 &kp N6 &kp N0    &kp RET
            &kp LSHFT  &none  &none  &kp F10 &kp F11 &kp F12         &none &kp COMMA  &kp N1 &kp N2 &kp N3 &kp N0    &kp RSHFT
                                            &lt LSYM TAB   &kp LCTRL       &kp SPACE  &kp LGUI                     &none
            
            &trans &trans &trans &trans
            &trans &trans &trans &trans
            >;
            /* cw-ccw = right-left = down-up */
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp C_BRI_DEC C_BRI_INC &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_sym {
            bindings = <
            &kp LALT   &kp TILDE      &kp AT   &kp HASH    &kp DLLR    &kp ESC             &kp RBRC    &kp AMPS    &kp STAR    &kp UNDER   &kp PLUS        &kp DEL 
            &kp LCTRL  &mt LCTRL EXCL &kp LBKT &kp LPAR    &kp COLON   &kp LBRC            &kp BSPC    &kp FSLH    &kp RPAR    &kp RBKT    &mt LCTRL EQUAL &kp RET
            &kp LSHFT  &kp GRAVE      &kp LT   &kp MINUS   &kp GT      &kp PIPE  &none     &kp CARET   &kp QMARK   &kp DQT     &kp SQT     &kp BSLH        &kp RSHFT
                                                           &trans      &kp LCTRL           &kp SPACE   &kp LGUI                  &none
            &trans &trans &trans &trans
            &trans &trans &trans &trans
            >;
            /* cw-ccw = right-left = down-up */
            sensor-bindings = <&inc_dec_kp DOWN UP &scroll_enc_rl &scroll_enc_fast_du>;
        };

        layer_adj {
            bindings = <
            &bootloader  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &none &none &none &none &none &none
            &out OUT_BLE &none        &none        &none        &none        &bt BT_CLR         &none &none &none &none &none &none       
            &out OUT_USB &none        &none        &none        &none        &bt BT_CLR   &none &none &none &none &none &none &none            
                                                                &none      &none                &none &none                         &none
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bootloader
            &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR   &bootloader
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp C_BRI_DEC C_BRI_INC &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };
    };

};

